from __future__ import annotations
import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db.db_helper import get_async_session
from app.keyboards.menu import kbs_menu, kb_menu
from app.recording.service import RecordingService
from app.user.handlers import check_user_agreement, show_terms_agreement

router = Router()
logger = logging.getLogger(__name__)


class Recording(StatesGroup):
    waiting_voice = State()


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
async def start_diagnose(
    msg: Message,
    state: FSMContext,
):
    service = RecordingService(msg, state)

    agreed = await check_user_agreement(msg.from_user.id)

    if not agreed:
        await show_terms_agreement(msg, state)
        return

    async with get_async_session() as orm_sess:
        service = RecordingService(orm_sess)
        user, sess, words = await service.start_session(msg.from_user.id)

    await state.update_data(
        session_id=sess.id,
        word_ids=[w.id for w in words],
        words=[w.text for w in words],
        idx=0,
        user_id=user.id,
    )

    await msg.answer(
        f"üóùÔ∏è –°–µ—Å—Å–∏—è ‚Ññ{sess.session_number} –æ—Ç–∫—Ä—ã—Ç–∞!\n\nüéØ –ö–≤–µ—Å—Ç-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1 –∏–∑ {len(words)}: <b>¬´{words[0].text}¬ª</b>.\n–ù–∞–∂–º–∏ –∑–∞–ø–∏—Å—å –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –µ–≥–æ –≥—Ä–æ–º–∫–æ-—Å–º–µ–ª–æ, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å —Å–≤–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª –≥–æ–ª–æ—Å–∞! üéôÔ∏è",
        reply_markup=kb_menu,
        parse_mode="HTML",
    )
    await state.set_state(Recording.waiting_voice)


@router.message(Recording.waiting_voice, F.text == "–ú–µ–Ω—é")
async def return_to_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ó–∞–ø–∏—Å—å –ø—Ä–µ—Ä–≤–∞–Ω–∞.", reply_markup=kbs_menu
    )


@router.message(Recording.waiting_voice, F.voice)
async def handle_voice(msg: Message, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"]
    word_ids = data["word_ids"]
    words_txt = data["words"]
    user_id = data["user_id"]
    sess_id = data["session_id"]

    async with get_async_session() as orm_sess:
        service = RecordingService(orm_sess)
        finished = await service.save_recording(
            bot=msg.bot,
            voice=msg.voice,
            sess_id=sess_id,
            user_id=user_id,
            word_id=word_ids[idx],
            tg_id=msg.from_user.id,
            total_words=len(word_ids),
        )
        logger.info("saved rec ‚Äî session=%s word=%s", sess_id, word_ids[idx])

    if finished:
        await msg.answer(
            "üéâ –£—Ä–∞, –≥–µ—Ä–æ–π! –¢—ã —Å–æ–±—Ä–∞–ª –≤—Å–µ –≤–æ–ª—à–µ–±–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–≤—É–∫–æ–≤ ‚Äî —Ç–≤–æ–π —Ä—é–∫–∑–∞–∫ —Å–∏—è–µ—Ç —è—Ä—á–µ —Ä–∞–¥—É–≥–∏!üåà\n–ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ó–≤—É–∫–æ–≤ –æ—Ç–Ω–µ—Å –∏—Ö –≤ –ó–≤—ë–∑–¥–Ω—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è —Ç–∞–π–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–º–µ–ª–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ! ‚ú®",
            reply_markup=kbs_menu,
        )
        await state.clear()
        return

    idx += 1
    await state.update_data(idx=idx)
    await msg.answer(
        f"‚úÖ –°—É–ø–µ—Ä! –ö—Ä–∏—Å—Ç–∞–ª–ª <b>{words_txt[idx - 1]}</b> –ø–æ–π–º–∞–Ω ‚Äî –æ–Ω —É–∂–µ —Å–∏—è–µ—Ç –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏. "
        f"–ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–≤—É–∫–æ–≤–æ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é?\n\n"
        f"üéØ –ö–≤–µ—Å—Ç-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {idx + 1} –∏–∑ {len(word_ids)}: ¬´<b>{words_txt[idx]}</b>¬ª.\n"
        f"–ù–∞–∂–º–∏ –∑–∞–ø–∏—Å—å –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –µ–≥–æ –≥—Ä–æ–º–∫–æ-—Å–º–µ–ª–æ, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å —Å–≤–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª –≥–æ–ª–æ—Å–∞! üéôÔ∏è",
        parse_mode="HTML",
        reply_markup=kb_menu,
    )


@router.message(Recording.waiting_voice)
async def handle_not_voice(msg: Message):
    await msg.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–º–µ–Ω–Ω–æ *–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*.", reply_markup=kb_menu
    )
