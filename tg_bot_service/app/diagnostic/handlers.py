from aiogram import Router, F
from aiogram.types import Message
from pathlib import Path

from app.db.database import get_async_session
from app.diagnostic.repositories import DiagnosisRepository
from app.keyboards.sessions import get_session_kbs
from app.diagnostic.utils import get_user_id_by_tg_id
from app.repositories.recording import RecordingRepository
import httpx

router = Router()


async def send_for_diag(
    paths: list[str],
):
    # Transform relative paths to absolute paths for the AI services
    # The AI services expects paths relative to /app/records
    transformed_paths = []
    for path in paths:
        # Convert relative path like "records/693505334/2/1.wav" to "/app/records/693505334/2/1.wav"
        if path.startswith("records/"):
            # Remove "records/" prefix and add "/app/records/" prefix
            relative_path = path.replace("records/", "")
            transformed_path = f"/app/records/{relative_path}"
        else:
            transformed_path = path
        transformed_paths.append(transformed_path)

    async with httpx.AsyncClient(timeout=60) as c:
        resp = await c.post(
            "http://ai_predict_service:8000/diagnose", json=transformed_paths
        )
        resp.raise_for_status()
        return resp.json()


@router.message(F.text == "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def show_main_menu(message: Message):
    user_tg_id: int = message.from_user.id
    user_id: int = await get_user_id_by_tg_id(user_tg_id)
    session_kbs = await get_session_kbs(user_id)
    await message.answer(
        f"üìú –ê—Ä—Ö–∏–≤ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ –ó–≤—É–∫–æ–ª–∞–Ω–¥–∏–∏\n–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ª–µ–∂–∞—Ç —Å–≤–∏—Ç–∫–∏-–ø–æ—Ä—Ç–∞–ª—ã –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Ö–æ–¥–æ–≤ ‚Äî –°–µ—Å—Å–∏—è 1, –°–µ—Å—Å–∏—è 2, –°–µ—Å—Å–∏—è 3‚Ä¶üó∫Ô∏è‚ú®\n–ù–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π —Å–≤–∏—Ç–æ–∫, –∏ –º—É–¥—Ä—ã–π –ò–ò-–∞–ª—å—Ö–∏–º–∏–∫ü§ñ –æ—Ç–∫—Ä–æ–µ—Ç –µ–≥–æ, –∏—Å—Å–ª–µ–¥—É–µ—Ç —Ç–≤–æ–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∑–≤—É–∫–æ–≤ –∏ –≤—ã–¥–∞—Å—Ç –≤–æ–ª—à–µ–±–Ω—ã–π –æ—Ç—á—ë—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—éüìë.\nüåü –£–∑–Ω–∞–π, –∫–∞–∫–∏–µ –∑–≤—É–∫–∏ —Ç—ã —É–∂–µ —É–∫—Ä–æ—Ç–∏–ª, –∞ –∫–∞–∫–∏–µ –µ—â—ë –∂–¥—É—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –ø–æ–∫–æ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã —Ä–µ—á–∏! üöÄ",
        reply_markup=session_kbs,
    )


@router.message(F.text.regexp(r"^–°–µ—Å—Å–∏—è\s+\d+$"))
async def handle_session_result(msg: Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–°–µ—Å—Å–∏—è N¬ª."""

    try:
        session_number = int(msg.text.split()[-1])
    except ValueError:
        await msg.answer("–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    user_tg_id = msg.from_user.id

    async with get_async_session() as db:
        diag_repo = DiagnosisRepository(db)
        rec_repo = RecordingRepository(db)

        session_obj = await diag_repo.get_by_number(
            user_id=user_tg_id,
            session_number=session_number,
        )
        if not session_obj:
            await msg.answer("–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        paths = await rec_repo.get_paths_by_session(session_obj.id)

    if not paths:
        await msg.answer("–£ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    result = await send_for_diag(paths)
    diagnosis = result["diagnosis"]
    recommendation = result["recommendation"]
    logs = result["logs"]  # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

    # --- –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    answer = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Å—Å–∏–∏ {session_number}:\n\n{recommendation}"
    await msg.answer(answer, disable_web_page_preview=True)
