from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile

from app.clients.diagnosis import DiagnosisClient
from app.clients.requests.diagnosis import DiagnosisRequest
from app.common.utils import get_report_path

from app.database.database import get_async_session
from app.kafka.producer import get_producer
from app.keyboards.sessions import build_ikb_user_sessions


from app.repositories.user import UserRepository
from app.services.diagnosis import DiagnosisService
from app.services.recording import RecordingService
from app.services.recording_session import RecordingSessionService
import re

import json
from app.services.user import UserService

router = Router()


@router.callback_query(F.data == "diagnosis:show")
async def show_diagnosis(
    cq: CallbackQuery,
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞."
    """
    async with get_async_session() as session:
        user = await UserRepository(session).get_or_create(cq.from_user.id)
        sessions = await RecordingSessionService(session).get_last_five_user_sessions(
            user.id
        )

    if not sessions:
        await cq.message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.\n–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–ø–∏—Å—å üéô",
        )
        await cq.answer()
        return

    await cq.message.answer(
        "üìú –ê—Ä—Ö–∏–≤ —Å–µ—Å—Å–∏–π ‚Äî –≤—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=build_ikb_user_sessions(sessions),
    )
    await cq.answer()


@router.callback_query(F.data.regexp(r"^diagnosis:session:(\d+)$"))
async def handle_session_result_cq(cq: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–°–µ—Å—Å–∏—è N¬ª.
    –î–æ—Å—Ç–∞–µ–º –ø–æ id —Å–µ—Å—Å–∏–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ mongo_oid, tg_user_id
    –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ diagnosis —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ kafka.
    """

    try:
        m = re.match(r"^diagnosis:session:(\d+)$", cq.data or "")
        recording_session_id = int(m.group(1))
    except ValueError:
        await cq.message.answer("–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    async with get_async_session() as session:
        recording_session_service = RecordingSessionService(session)
        recording_service = RecordingService(session)
        user_service = UserService(session)

        user = await user_service.get_or_create(cq.from_user.id)
        recording_session = await recording_session_service.get_by_id(
            recording_session_id=recording_session_id,
        )
        if not recording_session:
            await cq.message.answer("–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        mongo_object_ids = await recording_service.get_mongo_objects_ids_by_session(
            recording_session.id
        )

    if not mongo_object_ids:
        await cq.message.answer("–£ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    data = DiagnosisRequest(
        mongo_object_ids=mongo_object_ids, chat_id=cq.message.chat.id, user_id=user.id
    )

    producer = get_producer()

    await cq.message.answer(
        "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –æ—Ç—á–µ—Ç!"
    )
    await producer.send_and_wait(
        topic="diagnosis_topic",
        value=json.dumps(data.model_dump()).encode("utf-8"),
    )
