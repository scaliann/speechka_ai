from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile, FSInputFile

from app.clients.diagnosis import DiagnosisClient
from app.clients.requests.diagnosis import DiagnosisRequest

from app.database.database import get_async_session
from app.keyboards.sessions import build_ikb_user_sessions
from pathlib import Path

from app.repositories.user import UserRepository
from app.services.recording import RecordingService
from app.services.recording_session import RecordingSessionService
import re

from app.services.user import UserService

router = Router()

BASE_DIR = Path(__file__).parent.parent
PDF_PATH = BASE_DIR / "templates/pdf.pdf"


@router.callback_query(F.data == "diag:show")
async def show_diagnosis(
    cq: CallbackQuery,
):
    # –í–°–Å, —á—Ç–æ —Ç—Ä–æ–≥–∞–µ—Ç –ë–î ‚Äî –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    async with get_async_session() as session:
        user = await UserRepository(session).get_or_create(cq.from_user.id)
        sessions = await RecordingSessionService(session).get_last_five_user_sessions(
            user.id
        )

    if not sessions:
        await cq.message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.\n–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–ø–∏—Å—å üéô",
        )
        await cq.answer()
        return

    await cq.message.answer(
        "üìú –ê—Ä—Ö–∏–≤ —Å–µ—Å—Å–∏–π ‚Äî –≤—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=build_ikb_user_sessions(sessions),
    )
    await cq.answer()


@router.callback_query(F.data.regexp(r"^diag:session:(\d+)$"))
async def handle_session_result_cq(cq: CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–°–µ—Å—Å–∏—è N¬ª."""

    try:
        m = re.match(r"^diag:session:(\d+)$", cq.data or "")
        session_number = int(m.group(1))
    except ValueError:
        await cq.message.answer("–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    async with get_async_session() as session:
        recording_session_service = RecordingSessionService(session)
        recording_service = RecordingService(session)
        user_service = UserService(session)

        user = await user_service.get_or_create(cq.from_user.id)
        recording_session = await recording_session_service.get_by_number(
            user_id=user.id,
            session_number=session_number,
        )
        if not recording_session:
            await cq.message.answer("–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        mongo_object_ids = await recording_service.get_mongo_objects_ids_by_session(
            recording_session.id
        )

    if not mongo_object_ids:
        await cq.message.answer("–£ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    data = DiagnosisRequest(mongo_ids=mongo_object_ids)
    results = await DiagnosisClient().get_diagnosis(data=data)

    doc = FSInputFile(
        PDF_PATH,
        filename="report.pdf",
    )

    await cq.message.answer_document(
        document=doc,
        caption=f"–í–∞—à PDF üìÑ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {results}",
    )
